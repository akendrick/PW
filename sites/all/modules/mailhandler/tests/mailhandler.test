<?php
/**
 * @file
 * Tests for Mailhandler modules.
 */

class MailhandlerTestCase extends DrupalWebTestCase {
  protected $mailhandler_user;
  protected $profile = 'testing';

  public static function getInfo() {
    return array(
      'name' => 'Mailbox creation and import',
      'description' => 'Create mailboxes and feeds importers and make sure they work.',
      'group' => 'Mailhandler',
    );
  }

  public function setUp() {
    parent::setUp('taxonomy', 'file', 'mailhandler', 'mailhandler_php_imap', 'mailhandler_default', 'text');
    $permissions = array('administer nodes', 'bypass node access', 'administer mailhandler', 'administer feeds', 'administer taxonomy', 'administer content types');
    $this->mailhandler_user = $this->drupalCreateUser($permissions);
    // Create and log in our privileged user.
    $this->mailhandler_user->is_new = FALSE;
    user_save($this->mailhandler_user, array('mail' => 'from@example.com'));
    $this->drupalLogin($this->mailhandler_user);
  }

  public function createMailbox($prefix) {
    $edit = array();
    $edit['admin_title'] = $prefix . '@example.com';
    $edit['mail'] = $prefix . '_example_com';
    $edit['settings[type]'] = 'local';
    $edit['settings[folder]'] = drupal_get_path('module', 'mailhandler') . '/tests/' . $prefix . '_mbox';
    $edit['settings[flag_after_read]'] = FALSE;
    $this->drupalPost('admin/structure/mailhandler/add', $edit, t('Save'));
    $this->assertText(t('@title has been created.', array('@title' => $prefix . '_example_com')));
  }

  public function createSource($prefix, $auth_required = FALSE) {
    $edit = array();
    $edit['feeds[MailhandlerFetcher][mailbox]'] = $prefix . '_example_com';
    $edit['feeds[MailhandlerParser][auth_required]'] = $auth_required;
    $edit['title'] = $prefix . '@example.com';
    $this->drupalPost('node/add/mailhandler-source', $edit, t('Save'));
  }

  public function testMailhandlerImport() {
    // Create article content type.
    $type = array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );

    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Create mailboxes.
    $this->createMailbox('empty');
    $this->createMailbox('test1');
    $this->createMailbox('test2');
    $this->createMailbox('test3');
    $this->createMailbox('attachment1');
    $this->createMailbox('singlepart');
    $this->createMailbox('mime');

    // Add field_files to articles.
    $field = array(
      'field_name' => 'field_files',
      'type' => 'file',
      'settings' => array(),
      'cardinality' => 1,
    );
    field_create_field($field);
    $instance = array(
      'field_name' => 'field_files',
      'label' => 'Files',
      'entity_type' => 'node',
      'bundle' => 'article',
      'required' => FALSE,
      'settings' => array(),
      'widget' => array(
        'type' => 'file_generic',
        'settings' => array(),
      ),
    );
    field_create_instance($instance);

    // Create tags vocabulary and field.
    $description = st('Use tags to group articles on similar topics into categories.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
      'name' => st('Tags'),
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,

    );
    taxonomy_vocabulary_save($vocabulary);

    $field = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      // Set cardinality to unlimited for tagging.
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'entity_type' => 'node',
      'label' => 'Tags',
      'bundle' => 'article',
      'description' => $vocabulary->help,
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
        'weight' => -4,
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
        'teaser' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);

    // Add from fields to articles.
    $fields = array('field_from_address', 'field_from_name');
    foreach ($fields as $field_name) {
      $field = array(
        'field_name' => $field_name,
        'type' => 'text',
        'settings' => array(),
        'cardinality' => 1,
      );
      field_create_field($field);
      $instance = array(
        'field_name' => $field_name,
        'label' => $field_name,
        'entity_type' => 'node',
        'bundle' => 'article',
        'required' => FALSE,
        'settings' => array(),
        'widget' => array(
          'type' => 'text_textfield',
          'settings' => array(),
        ),
      );
      field_create_instance($instance);
    }

    // Override Mailhandler Default importer, map taxonomy, files, and text fields.
    $this->drupalGet('admin/structure/feeds/edit/mailhandler_nodes/settings/MailhandlerParser');
    $edit = array();
    $edit['available_commands'] = 'status' . "\n" . 'taxonomy';
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('admin/structure/feeds/edit/mailhandler_nodes/mapping');
    $edit = array();
    $edit['source'] = 'taxonomy';
    $edit['target'] = 'field_tags';
    $this->drupalPost(NULL, $edit, t('Add'));
    $edit = array();
    $edit['source'] = 'attachments';
    $edit['target'] = 'field_files';
    $this->drupalPost(NULL, $edit, t('Add'));
    $edit = array();
    $edit['source'] = 'from-address';
    $edit['target'] = 'field_from_address';
    $this->drupalPost(NULL, $edit, t('Add'));
    $edit = array();
    $edit['source'] = 'from-name';
    $edit['target'] = 'field_from_name';
    $this->drupalPost(NULL, $edit, t('Add'));

    // Test import of an empty mailbox.
    $this->createSource('empty', FALSE);
    $this->assertText(t('There are no new nodes.'));

    // Test import of message - auth user, auth required.
    $this->createSource('test1', TRUE);
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('This is a test message 1'));
    $tags = field_get_items('node', $node, 'field_tags', LANGUAGE_NONE);
    $this->assertTrue($node->status);
    $this->assertEqual($tags[0]['tid'], 1);
    $this->assertEqual($tags[1]['tid'], 2);
    // Test that from-address and from-name headers work.
    $from_address = field_get_items('node', $node, 'field_from_address', LANGUAGE_NONE);
    $this->assertEqual($from_address[0]['value'], 'from@example.com');
    $from_name = field_get_items('node', $node, 'field_from_name', LANGUAGE_NONE);
    $this->assertEqual($from_name[0]['value'], 'Dane Powell');
    $edit = array();
    $this->drupalPost('node/' . $node->nid . '/delete', $edit, t('Delete'));

    // Test import of message - auth user, auth not required.
    $this->createSource('test1', FALSE);
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('This is a test message 1'));
    $tags = field_get_items('node', $node, 'field_tags', LANGUAGE_NONE);
    $this->assertTrue($node->status);
    $this->assertEqual($tags[0]['tid'], 1);
    $this->assertEqual($tags[1]['tid'], 2);

    // Test import of message - anon user, auth required.
    $this->createSource('test2', TRUE);
    $this->assertText(t('There are no new nodes.'));
    $this->assertFalse($node = $this->drupalGetNodeByTitle('This is a test message 2'));

    // Test import of message - anon user, auth not required.
    $this->createSource('test2', FALSE);
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('This is a test message 2'));
    $tags = field_get_items('node', $node, 'field_tags', LANGUAGE_NONE);
    $this->assertFalse($node->status);
    // Test that taxonomy and commands with special characters work.
    $this->assertEqual($tags[0]['tid'], 1);
    $this->assertEqual($tags[1]['tid'], 2);
    $this->assertEqual($tags[2]['tid'], 3);
    $this->assertEqual($tags[3]['tid'], 4);

    // Test import of multiple messages.
    $this->createSource('test3');
    $this->assertText(t('Created 2 nodes.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('Test message 1 of 2'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('Test message 2 of 2'));

    // Test import of messages with attachments.
    $this->createSource('attachment1');
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('Test attachments 1'));
    $files = field_get_items('node', $node, 'field_files', LANGUAGE_NONE);
    $this->assertEqual($files[0]['filemime'], 'text/plain');

    // Test import of single-part messages.
    $this->createSource('singlepart');
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('This is a single-part message'));
    $files = field_get_items('node', $node, 'field_files', LANGUAGE_NONE);
    $this->assertEqual($files[0]['filemime'], 'image/jpeg');

    // Test import of messages with MIME-encoded headers.
    $this->createSource('mime');
    $this->assertText(t('Created 1 node.'));
    $this->assertTrue($node = $this->drupalGetNodeByTitle('mime header'));
  }

}
