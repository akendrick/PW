<?php
/**
* @file
* Custom FAPI payment info with validation + submission.
*
*
*
* ###### SUBMISSION FORM is created in 'ad_payment_form_ad_s_node_form_alter' ######
*
*
*
*
* HOOK_menu:
*   - user registration form if not logged in.
*      - NO USER REGISTRATION REQUIRED
*   - Get proper form
*   - Handle Thank-you pages for form and generic for other submissions
*
* ad_submit_form_page
*   - checks admin settings to see if it's been disabled
*   - User login - No longer used.
*
* HOOK_block_info
*   - create custom block for linking to ad submission page.
*
* HOOK_block_view
*   - create custom block for linking to ad submission page.
*
* HOOK_FORM_node_form_alter
*   - change submit and save buttons
*   - load external Credit Card Form
*       - ad_payment_form.inc (FAPI)
*   - fix look of Classified Taxonomy listing
*   - Ad custom info blocks
*       - Free for free promotion block
*       - contact info block
*   - BeautyTips for form description
*
* ad_payment_beautify
*   - TODO - implement module beautytips and make magic.
*
* HOOK_validate
*   - check form values
*       if jQuery price isn't detected do seperate PHP check
*       - ad_payment_price_check
*       Output Preview price
*       - TODO? --> currently using drupal_set_messege to show price
*               isntead use FAPI - "#type' => 'item'
*               and embed directly in the form above the Submit button
*   - Validate Credit Card
*       - ad_payment_validate_cc_data
*       - Output Credit form errors
*       - log errors
*
* HOOK_submit
*   - set page redirect upon completion
*
* HOOK_node_insert
*   - double check form submission data and massage it.
*   - encrypt/save to custom table ADP
*   - save basic data to variable table for receipt/thank-you page
*   - log errors
*
* HOOK_node_delete
*   - delete node & data from custom table after processing
*
* ad_payment_form_price_display
*   - custom form price display
*   - NOT CURRENTLY USED
*
* ad_payment_get_business_rated
*   - custom DB query for pricing purposes
*   - determine which taxonomy sections must be 'business' rated
*   - save to Variable table
*
* ad_payment_get_classification_headers
*   - custom DB query for display purposes
*   - find parent taxonomy terms for display
*   - save to Variable table
*
* HOOK_taxonomy
*   - update taxonomy data
*
* ad_payment_get_classified_list
*   - more taxonomy stuff
*
* ad_payment_init
*   - add CSS & JS to form
*
* ad_paymnet_views_api
*   - load views table data
*
*
*
*/

// FORM DEBUG
// Displays Ad Payment Data
define ('ADP_LOG_ERRORS', TRUE); // Send errors to Watchdog!
define ('ADP_LOG_ERRORS_CC', TRUE); // Just Log CC Errors.

/** --------- ADP_LOGIN -----
 * TRUE -> Go to login form first.
 * FALSE-> go direct to ad submission, Login in the background.
 */
define ('ADP_LOGIN', FALSE);

/** --------- Credit Card Validation -----
 */
define ('CC_VALIDATION_MODE', FALSE);

/**
* Implementation of HOOK_menu
*/
function ad_payment_menu() {
  $items['ad/submit'] = array(
    'access callback' => TRUE,
    'title'           => 'Submit Classified Ad',
    'page callback'   => 'ap_submit_form_page',
    'type'            => MENU_NORMAL_ITEM,
  );

  $items['ad/%/thank-you'] = array(
    'access callback' => TRUE,
    'title'           => 'Your ad has been submitted.',
    'page callback'   => 'thankyou_page',
    'page arguments'  => array(1),
    'file'            => 'ad_payment_receipt.inc',
    'type'            => MENU_CALLBACK,
  );

  $items['ad/thank-you'] = array(
    'access callback' => TRUE,
    'title'           => 'Your ad has been submitted.',
    'page callback'   => 'thankyou_free',
    'page arguments'  => array(1),
    'file'            => 'ad_payment_receipt.inc',
    'type'            => MENU_CALLBACK,
  );

  return $items;
}


/**
* Implementation of custom page.
*
* If user not logged in present LoginToboggan form.
* else get `Submit Ad` form.
*
* ************************** DISABLED **********
*
* @return
*  form data
*
* The login portion is commented out.
*/
function ap_submit_form_page() {
  $message_status = variable_get('pennywise_classified_settings_submissions_message_status', 0);
  if ($message_status) {
    $message = variable_get('pennywise_classified_settings_submissions_message');
    drupal_set_message($message, $message_status);
}

  // Abort Submission if Admin has disabled submissions.
  $ad_submsision = variable_get('pennywise_classified_settings_submissions', 1);

  if (!$ad_submsision) {
    drupal_set_message( t('Classified ad submission is currently disabled.') );
    $link = l('Return to PennywiseADS.com.', '<front>', array('attributes' => array('class' => 'button', 'id' => 'block-ad-payment-ad-payment-create-ad')));
    return $link;
  }

  global $user;

  // IF user is registered go to ad.
  // OR login is disabled.
  //ELSE carry on to login/register.

  if ($user->uid || !ADP_LOGIN) {

    module_load_include('inc', 'node', 'node.pages');
    $ad_sub_form = node_add('ad_s');

    return drupal_render($ad_sub_form);
  }
  elseif (!$user->uid) {
    $active_form = 'register';
  }

  //elseif (in_array('submit ad', $user->roles) || in_array('authenticated user', $user->roles)) {
  //  $active_form = 'login';
  //}

  $login_form = drupal_get_form('user_login');
  $login_form['#attached']['js'][] = drupal_get_path('module', 'logintoboggan') .'/logintoboggan.unifiedlogin.js';
  $login_form['#attached']['js'][] = array(
    'data' => array(
      'LoginToboggan' => array(
        'unifiedLoginActiveForm' => $active_form,
      ),
    ),
    'type' => 'setting',
  );

  $register_form = drupal_get_form('user_register_form');
  $register_form['actions']['submit']['#value'] = 'Start a classified ad.';

  $rendered_login_form = drupal_render($login_form);
  $rendered_register_form = drupal_render($register_form);
  $variables = array(
    'login_form' => $rendered_login_form,
    'register_form' => $rendered_register_form,
    'active_form' => $active_form,
  );
  $form = theme('lt_unified_login_page', $variables);

  $content = <<<LOGIN
<div id="user-register-form" class="toboggan-unified toboggan-outer register grid-14 prefix-5 suffix-5">
  <div id="toboggan-unified toboggan-inner">
    $form
  </div>
</div>
LOGIN;

  return $content;
}

/**
* Implementation of hook_block_info
*
* @return
*  Ad creation link block
*/
function ad_payment_block_info() {
  $blocks['ad_payment_create_ad'] = array(
    'info'       => 'Submit Classified Ad',
    'status'     => variable_get('pennywise_classified_settings_submissions', 1),
    'visibility' => 0,
    'region'     => 'sidebar_first',
    'pages'      => 'ad/*',
  );

  return $blocks;
}

/**
* Implementation of hook_block_view
*
*  Create Ad Submission Block
*
* @return
*  `Ad Submit` submission form link.
*/
function ad_payment_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ad_payment_create_ad':
      $block['subject'] = '<none>';
      $block['content'] = '<div id="ad-submission-link-wrapper">' .
        l('Submit Ad', 'https://pennywiseads.com/ad/submit', array('attributes' => array('class' => array('ad-submission-link')),)) .
        '</div>';
      break;
  }
  return $block;
}

/**
* Implementation of HOOK_form_alter()
*
* Alter form to increase legibility and flow.
* - Insert a modular Price block for both PHP and jQuery pricing.
* - Insert CC Form in the Last Step
*
*/
function ad_payment_form_ad_s_node_form_alter(&$form, &$form_state, $form_id) {
  // Change Save to Submit.
  $form['actions']['submit']['#value']  = 'Submit Ad';
  $form['actions']['preview']['#value']  = 'Preview Price';
  $form['actions']['preview']['#weight']  = -350;

  // Insert CC Validation.
  $form['#validate'][] = 'ad_payment_cc_validate';
  $form['#submit'][]   = 'ad_payment_cc_submit';

  // Rename File upload to 'image'
  $form['field_image'][LANGUAGE_NONE]['#file_upload_title'] = 'Click here to select an image.';

  // Add Label to Liveload checkbox.
  $form['field_liveload'][LANGUAGE_NONE]['#title_display'] = 'before';

  // Load CC external form
  module_load_include('inc', 'ad_payment', 'ad_payment_form');
  ad_payment_form($form, $form_state);


//  // Alter Display of Taxonomy Classification Section
  $pw_list = variable_get('ad_payment_classified_list', ad_payment_get_classified_list() );
  $form['field_tags'][LANGUAGE_NONE]['#options'] = $pw_list;

  // Add Default Hours of Operation
  if (variable_get('pennywise_general_contact_settings', 0)) {
    $block = module_invoke('pennywise', 'block_view', 'pw_hours_operation');
    #$hours = variable_get('pennywise_general_contact_settings');
    $form['hours'] = array(
      '#prefix' => '<div id="pw-hours-operation">',
      '#markup' => '<h4>' . $block['subject'] . '</h4>' . $block['content'],
      '#suffix' => '</div>',
    );
    $form['#group_children']['hours'] = 'group_more';
  }

  // Add Free for Free Block
  if (variable_get('free_for_free_embed', 0)) {
    $block = module_invoke('pennywise', 'block_view', 'pw_free_for_free');
    $free4free = $block['content'];
    $form['freeforfree'] = array(
      '#prefix' => '<div>',
      '#markup' => $free4free,
      '#suffix' => '</div>',
    );
    $form['#group_children']['freeforfree'] = 'group_more';
  }

  // Beauty Tips
  $form['field_rate'][LANGUAGE_NONE]['#description'] =
    '<span class=" beautytips form-toggle" id="bt-business" >What is a Business?</span> <div id="beautytips-toggle-box-bt-business" class="beautytips-box">' . $form['field_rate'][LANGUAGE_NONE]['#description'] . '</div>';
  $form['field_area'][LANGUAGE_NONE]['#description'] =
    '<span class=" beautytips form-toggle" id="bt-areas">Areas defined.</span> <div id="beautytips-toggle-box-bt-areas" class="beautytips-box"> ' . $form['field_area'][LANGUAGE_NONE]['#description'] . ' </div>';

}

/**
* Implementation of custom module to implement BeautyTips.
*
* TODO -- Implement beautytips in description.
*         More to come.
*/
// function ad_payment_bt(&$form = array()) {

//  $form['field_rate'][LANGUAGE_NONE]['#description'] =
//    '<span class="beautytips" title="' . $form['field_rate'][LANGUAGE_NONE]['#description'] . '">What is a Business?</span>';
//  $form['field_area'][LANGUAGE_NONE]['#description'] =
//    '<span class="beautytips" title="' . $form['field_area'][LANGUAGE_NONE]['#description'] . '">Areas defined.</span>';

// }


/**
* Custom CC form submission Validation.
*
* Check form values and validate credit card.
* Output
*/
function ad_payment_cc_validate(&$form, &$form_state) {

  // Check if jQuery/JS Pricing disabled
  if (!isset($form_state['values']['field_ad_details'][LANGUAGE_NONE][0]['value']) || $form_state['triggering_element']['#value'] == 'Preview Price') {
    module_load_include('inc', 'ad_payment', 'ad_payment_price_check');
    $values = ad_payment_get_form_details($form_state);

    form_set_value($form['field_ad_details'][LANGUAGE_NONE][0], $values['details'], $form_state);

     $imageBool = (is_numeric($values['image'])) ? 'Yes' : 'No';
     $feedback_message = "
      <strong>Details:</strong><br>
      Words: @wordcount<br>
      Areas(@area_count): @areas<br>
      Section(@section_count): @sections<br>
      Rate: @rate<br>
      Image: @image<br>
      Ad: @liveload<br>
      <br>
       <strong>Pricing:</strong><br>
      Subtotal: $@subtotal @discount<br>
        Extras: $@extras<br>
         Taxes: $@taxes<br>
         Total: $@total_rounded<br>
      ";
    $feedback_vars = array(
      '@rate' => $values['rate']['rate_name'],
      '@wordcount' => $values['wordcount'],
      '@count_over' => $values['wordcount_over'],
      '@word_rate' => $values['rate']['word_rate'],
      '@price_over' => $values['rate']['word_rate'] * $values['wordcount_over'],
      '@area_count' => $values['area_count'],
      '@areas' => $values['areas'],
      '@area_discount' => $values['discount'],
      '@section_count' => $values['section_count'],
      '@sections' => $values['sections'],
      '@image' => ($values['image']) ? 'Image detected' : 'No Image',
      '@liveload' => ($values['ad_type']) ? 'Liveload ClassifiedAd!' : ' Classified',
      '@subtotal' => $values['subtotal'],
      '@discount' => ($values['discount']) ? '($' . $values['discount'] . ' discount)' : '',
      '@extras' => $values['extras'],
      '@taxes' => $values['taxes'],
      '@total' => $values['subtotal'],
      '@total_rounded' => $values['total'],
    );
    drupal_set_message(t($feedback_message, $feedback_vars));
  }

  // Check CC Data
  module_load_include('inc', 'ad_payment', 'ad_payment_cc_validate');
  $validated = ad_payment_validate_cc_data($form_state['values']);

  if (is_array($validated)) {
    $log_message = 'Validation Errors<br><br>';
    foreach($validated as $field => $message) {
      form_set_error($field, $message);
      $log_message .= '[' . $field . '] = ' . $message . '<br>';
    }
    if (ADP_LOG_ERRORS && is_array($validated)) {
      $type = 'ADP - Validation Errors';
      $log_message .= '<br><br>Logged by <b>ad_payment_cc_validate</b> in <em>ad_payment.module</em>';
      watchdog($type, $log_message);
    }
  }


}


/**
* Custom CC Submit Handler.
*
* Submit data to Netidea.
* Retrieve CCID and feed it into Ad_Payment module to link the two.
*
* Check for User by email
* - If user doesn't exist create with name, email and random password.
* - If already exists link to node.
* - Send email comfirmation.
*/
function ad_payment_cc_submit($form, &$form_state) {
  // Store TempID
  if (!isset($form_state['redirect'])) {
    $temp_id = time();
    $form_state['node']->title = 'ad_' . $temp_id;
    $form_state['redirect']     = 'ad/' . $temp_id . '/thank-you';
    // Update Form
    $form['#action'] =  $temp_id . '/thank-you';
  }


}


/**
 * Implementation of HOOK_node_insert()
 *
 * After form is submitted and during node creation:
 * - Save sensitve data to encrypted ADP table.
 * - Log errors
 */
function ad_payment_node_insert($node) {
  if($node->type == 'ad_s') {

    // Double Check AD DETAILS
    module_load_include('inc', 'ad_payment', 'ad_payment_price_check');
    $details = ad_payment_get_node_details($node);

    /* TEST subtotal */
    if (!isset($details['subtotal'])) {
      // see if no subtotal present at all.
      $message = 'No subtotal: @subtotal ** Set to default "0.00"<br>taxes: @taxes <br>total: @total <br> <br>AD - @ad';
      $message_vars = array('@subtotal' => $price['subtotal'], '@taxes' => $details['taxes'], '@total' => $details['total'], '@ad' => $node->title);

      watchdog('ADP Node', $message, $message_vars);
      $details['subtotal'] = 0.00;

    }
    else {
      $new_subtotal = number_format($details['subtotal'], 2, '.', '');
      $new_total = number_format($details['total'], 2, '.', '');
      if ($new_subtotal != $details['subtotal'] || $new_total != $details['total'] ) {
        $details['subtotal'] = $new_subtotal;
        $details['total'] = $new_total;

        // Log discrepency.
        $message = 'OLD subtotal: @subtotal <br>NEW subtotal: @newSub <br>taxes: @taxes <br>total: @total <br>NEW total: @newTotal<br> <br>AD - @ad';
        $message_vars = array('@subtotal' => $details['subtotal'],'@newSub' => $new_subtotal, '@taxes' => $details['taxes'], '@total' => $details['total'], '@newTotal' => $new_total, '@ad' => $node->title);
        watchdog('ADP Price', $message, $message_vars);
      }
    }

    $fields = array(
      'ccid'    => $node->title,
      'uid'     => 0,
      'nid'     => $node->nid,
      'card_name' => aes_encrypt($node->field_first_name . ' ' . $node->field_last_name),
      'email'     => aes_encrypt($details['user']['email']),
      'phone'     => aes_encrypt($details['user']['phone']),
      'cc_type' => aes_encrypt(($node->field_card_type) ? 'Visa' : 'Mastercard'),
      'exp_m'   => aes_encrypt($node->field_exp_month),
      'exp_y'   => aes_encrypt($node->field_exp_year),
      'cc_num'  => aes_encrypt($node->field_cc_number), // substr($node->field_cc_number, -4),
      'notes'   => $note = ($details['notes']) ? $details['notes'] : 'NULL',
      'created' => $node->created,
      'word_count'  => $details['wordcount'],
      'areas'    => $details['areas'],
      'duration' => $details['duration'],
      'liveload' => ($details['ad_type'] == NULL) ? 0 : $details['ad_type'],
      'image'    => ($details['image'] == NULL || $details['image'] == 'No image') ? 0 : $details['image'],
      'price_subtotal' => $details['subtotal'],
      'price_extras'   => $details['extras'],
      'price_taxes'    => $details['taxes'],
      'price_total'    => $details['total'],
    );

    $nid = db_insert('adp')->fields($fields)->execute();


    if (ADP_LOG_ERRORS) {
      $type = 'ADP Node';
      $message = 'Node Submit: ' . $fields['nid'];
      foreach ($fields as $key => $field){
        if ($key != 'cc_num' || $key != 'exp_m' || $key != 'exp_y' || $key != 'cc_type') {
          $message .= '<br>' . $key . ': ' . $field;
        }
      }
      $message .= '<br><br>Logged by <b>ad_payment_node_insert</b> in <em>ad_payment.module</em>';
      watchdog($type, $message);
    }

    if ($node->nid) {
      // Add Recipt ID to details (added to customer receipt later).
      $details['receipt'] = $fields['ccid'];

      // Send Email upon Completion.
      module_load_include('inc', 'ad_payment', 'ad_payment_mail');
      ad_payment_send_email('inhouse', $details);

      variable_set('ad_submission_' . $node->title, $details);
      drupal_goto('ad/' . $node->title . '/thank-you');

    }
    else {
        $message = 'NO NODE ID!<BR><BR>Ad submission has encountered some errors in saving CC data for nid: @nid - ccid: @ccid';
        $message .= '<br><br>Logged by <b>ad_payment_node_insert</b> in <em>ad_payment.module</em>';
        $message_vars = array('@nid' => $node->nid, '@ccid' => $node-title);
        watchdog('ADP Node', $message, $message_vars);
      return FALSE;
    }
    // Set up on screen receipt and page redirect.
  return TRUE;
  }
}


/**
 * Implementation of HOOK_node_delete()
 *
 * If you delete `ad_s` from administration - delete related field in `adp` table.
 */
function ad_payment_node_delete($node) {
  if($node->type == 'ad_s') {
    variable_del('ad_submission_' . $node->nid);

    $num_deleted = db_delete('adp')
      ->condition('nid', $node->nid)
      ->execute();
  }

}



/**
* Ad Price Display Theme Registration.
*
* @param $form_state['storage']['price']
*
* @return
*   HTML output for form display.
*
* @TODO
*   Create/register THEME
*/
//function ad_payment_form_price_display($form_state) {
//  $price = $form_state['storage']['price'];
//  if(!$price) {
//    return;
//  }
//
//  dpm('test ad_payment_form_price_display');
//
//  // Ad Copy
//  $ad_copy = check_plain($form_state['node']->field_ad_copy[LANGUAGE_NONE][0]['value']);
//
//  // Liveload
//  $ad_status = ($price['options']['liveload'] == TRUE) ? 'Liveload Classified Ad' : 'Classified Ad';
//
//  // Areas
// if (is_array($form_state['node']->field_area[LANGUAGE_NONE])) {
//   foreach($form_state['node']->field_area[LANGUAGE_NONE] as $area) {
//     $areas .= ' ' . $area[0];
//   }
// }
//  // Rate
//  $rate = ($price['rate']['term_rate'] == 0) ? 'Personal' : 'Business';
//
//  // Ad Taxonomy
//  $classification = $price['rate']['term'];
//  $section = $price['rate']['rate_name'];
//
//  // Ad Price
//  $discount = ($price['areas'] == 4) ? ' <br/><em>With $2 Discount for booking all four areas! </em>' : '';
//  $ad_price = '$' . $price['total'];
//
//  // Output Display
//  // THIS NEEDS TO BE THEMED!
//  $ad_review =
//    '<dl>' .
//    '<lh>Ad Copy:</lh><dt>' . $ad_copy . '</dt>' .
//    '<lh>Ad Type:</lh><dt>' . $ad_status . '</dt>' .
//    '<lh>Publication In <strong>' . $price['areas'] . '</strong> Area(s): </lh><dt> ' . $areas . ' </dt>' .
//    '<lh>Classification:</lh><dt>' . $classification . ' (' . $section . ' rated)</dt>' .
//    '<lh class="ad_price">Price:</lh><dt> <strong>' . $ad_price . '</strong>' . $discount . '<dt>' .
//    '</dl>';
//
//  // Set Form Return Value
//  jQuery('#edit-field-price-und-0-value').attr('val', $ad_price);
//
//  return $ad_review;
//
//}

/**
 * Custom Database query.
 *
 * Searches Taxonomy -> classification database for Business Rated ads.
 * @return
 *  array( TID => TERM Name)
 */
function ad_payment_get_business_rated() {
  $taxonomy_type = 'classification';
  $business_rated_term = 1;
  $result = db_query("SELECT * FROM {field_data_field_business_rated} WHERE field_business_rated_value = :rated", array(':rated' => $business_rated_term));

  foreach ($result as $record) {
    $term = taxonomy_term_load($record->entity_id);
    $business_rated[$term->tid] = $term->name;
  }

  variable_set('ad_payment_business_rated', $business_rated);

  return $business_rated;
}

/**
 * Custom Database query.
 *
 * Searches Taxonomy -> classification database for Business Listing Group Headers.
 * @return
 *  array( TID => TERM Name)
 */
function ad_payment_get_classification_headers() {

  $result = db_query(
    "SELECT taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name
    FROM {taxonomy_term_data} taxonomy_term_data
    LEFT JOIN {taxonomy_term_hierarchy} taxonomy_term_hierarchy ON taxonomy_term_data.tid = taxonomy_term_hierarchy.tid
    LEFT JOIN {taxonomy_term_data} taxonomy_term_data_taxonomy_term_hierarchy ON taxonomy_term_hierarchy.parent = taxonomy_term_data_taxonomy_term_hierarchy.tid
    LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
    LEFT JOIN {taxonomy_term_hierarchy} taxonomy_term_data_taxonomy_term_hierarchy__taxonomy_term_hierarchy ON taxonomy_term_data_taxonomy_term_hierarchy.tid = taxonomy_term_data_taxonomy_term_hierarchy__taxonomy_term_hierarchy.tid
    WHERE (( (taxonomy_vocabulary.machine_name IN ('classification')) AND (taxonomy_term_data_taxonomy_term_hierarchy__taxonomy_term_hierarchy.parent IS NULL ) ))
    ORDER BY taxonomy_term_data_name ASC
    ");

   foreach ($result as $record) {
     $headers[$record->tid] = $record->taxonomy_term_data_name;
   }

  variable_set('ad_payment_classification_headers', $headers);

  return $headers;
}


/**
* Implementation of HOOK_TAXONOMY
*/
function ad_payment_taxonomy($op, $type, $array = array()) {
  $name = check_plain($array['name']);

  switch ($type) {
    case 'term':
      variable_del('ad_payment_business_rated');
      break;
  }
}

/**
* Custom function
*
* Returns a nested array of classifieds with header and children.
*/
function ad_payment_get_classified_list() {
  $business_rated = variable_get('ad_payment_business_rated', ad_payment_get_business_rated()); // Get Business rated.

  $parents = ad_payment_get_classification_headers();
  foreach ($parents as $tid => $term) {
    $children = taxonomy_get_children($tid);
    foreach ($children as $child) {
      if (isset($business_rated[$child->tid])) { // If business rated.
        $pw_list[$term][$child->tid] = $child->name . ' (Business Rated)';
        //dpm($child->name . ' is business rated');
      }
      else {
        $pw_list[$term][$child->tid] = $child->name;
      }
    }
    // Add any category that doesn't have a child (eg. Bulletin Board).
    if (!array_key_exists($term, $pw_list) && $term != 'Free') {
      $pw_list[$tid] = $term;
    }

  }
  return $pw_list;
}


/**
 * Implementation of HOOK_page
 *
 * TODO
 * - Make DB call and get list of Business Rated listings.
 * _ ! Dont' hardcode it!!
 *
 */
function ad_payment_init() {

  drupal_add_css(drupal_get_path('module', 'ad_payment') . '/css/ad_payment.css', array('type' => 'file'));

  // Get Business rated taxonomy sections.
  $business_rated = variable_get('ad_payment_business_rated', ad_payment_get_business_rated());

  // Get Business rated taxonomy section headers.
  $headers = variable_get('ad_payment_classification_headers', ad_payment_get_classification_headers());

  drupal_add_js(array('adPaymentBiz' => $business_rated), 'setting');
  drupal_add_js(array('adPaymentHead' => $headers), 'setting');

  // Add Default Classified Data
  $pw_defaults['taxRate'] = variable_get('pennywise_taxrate', '.5');
  $pw_defaults['taxRateDisplay'] = ($pw_defaults['taxRate'] * 100) . '%';


  drupal_add_js(array('pwDefaults' => $pw_defaults), 'setting');
  // Add jQuery UI
  // drupal_add_library('system', 'ui.tabs');
  // drupal_add_library('system', 'ui.button');

}

/**
* Implementation of views_api()
*/
function ad_payment_views_api() {

  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ad_payment') . '/views',
  );
}
