<?php

/**
*  @file
*  This module parses Adworks data into new Classified nodes.
*
*   @TODO
*   Move image file search into seperate function:
*   - Check images in upload folder and across the `files` structure.
*   - implement `file_validate_is_image($file)` -- Pro D7 Dev p.334
*   - implement UTF-8 file conversion.
*   - Check previous ads.
*     - Perform a cursory check on the ad body (check 5-10 ads)
*     - Check for similar ad copy
*     - If several ads found similar then put alert:
*       - 'DO you want to overwrite previous ads?'
*       - 'Do you want to save file and not update?'
*/

/**
* Implements hook_admin_paths_alter().
*
* Disable Overlay on edit page.
*/
//function MYMODULE_admin_paths_alter(&$paths) {
//  $paths['node/*/edit'] = FALSE;
//  #$paths['node/add'] = FALSE;
//  #$paths['node/add/*'] = FALSE;
//}


function adworks_node_insert($node) {
  if ($node->type == 'adworks_file') {
    $create_ads = $node->field_ad_creation_override[$node->language][0]['value'];
    _parse_adworks_data($node, $create_ads);
  }
}

function adworks_node_update($node) {
  #dsm($node);
  if ($node->type == 'adworks_file') {
    $create_ads = $node->field_ad_creation_override[$node->language][0]['value'];
    _parse_adworks_data($node, $create_ads);
  }
}

function adworks_node_view($node, $view_mode) {
  if ($node->type == 'adworks_file' && $view_mode == 'full' && $node->preview == 'Preview') {
    #dsm($node);
    _adworks_pre_flight_ads($node);
  }
}


/**
*  Implementation of custom parser.
*
*  Parse through imputed Adworks data.
*  Go through ads one by one.
*/
function _parse_adworks_data($node) {

  // Convert pasted text into individual ads then create ads.
  if ($node->body) {
    

    
    // CHECK IMAGES
    $image_check = _adworks_pre_flight_ads($node);
    if ($image_check == FALSE) {
      return;
    }
    
    // If images present proceed...
    $adworks_data = $node->body['und'][0]['value'];
    // Convert Text to UTF8
//    $adworks_data = mb_convert_encoding($adworks_data, "macintosh", "UTF-8");
    $adworks_ads = preg_split( '/\r\n|\r|\n/', $adworks_data);

    foreach ($adworks_ads as $ad) {
      if ($ad != NULL || $ad != '') {
        $results = _adworks_parse_indivual_ad($ad);
      }
    }
    
    if ($results['image']['error']) {
      foreach ($results['image']['error'] as $missing) {
        $images .= $missing . "\n";
      }
      drupal_set_message('MISSING IMAGES: ' . $images, 'warning');    
    }
    elseif ($results['ad_count'] == 0 || $results['ad_count'] == NULL) {
      drupal_set_message('No Ads Created!', 'warning');    
    }
    else {
      drupal_set_message('Ads Created: ' . $results['ad_count'], 'status');    
    }
  }
}

/**
*  Test Adworks Copy.
*  
*   Test the presence of referneced image files.
*   Count Ads and check corresponding taxonomy terms.
*
*   @return
*     Drupal_set_message - Overview of result
*     TRUE if all images are present.
*     FALSE if even 1 image is missing.
*/
function _adworks_pre_flight_ads($node) {
  $message = array(); // Empty message array.
  
  // Parse ADWORKS->node->body for ads
  if ($node->body) {
    $ads = $node->body['und'][0]['value'];

    // Collect Ads
    preg_match_all('/(?<=\<begad>)(.+)(?=<endad>)/', $ads, $copy);
    $ad_count = count($copy[0]);
    $ad_count_message = 'Classified Ad Count: ' . $ad_count . '<br>';

    // Collect Images
    preg_match_all('/(?<=PICAD)[0-9]{4,20}(?:[-_]*[0-9]{1,3})/', $ads, $images);
    $image_count = count($images[0]);
    $image_count_message = 'Image Count: ' . $image_count . '<br>';

    // Cycle through all the ads for images
    foreach ($images[0] as $key => $image) {
      // Search Directory // Upgradable function
      $image_name = $image . '.jpg';      
      $options = array ('key' => 'filename');
      $found = file_scan_directory('public://', '$' . $image_name . '$', $options);
      $image_file = array_shift($found);
      
      // If corresponding image is NOT FOUND record image name
      if (!$image_file->uri) {
        $missing_image_files[] = $image_name;
      }
    }
    
    // Count and sort missing images
    $message_body = $ad_count_message . $image_count_message . '<br>';
    
    if ($missing_image_files) {
      // Sort Image files
      sort($missing_image_files);
      foreach($missing_image_files as $missing) {
        $missing_images .= $missing . '<br>';
      }
      $message_body .= '####### NO ADS UPLOADED ######### <br>MISSING IMAGES: <br>' . $missing_images;    
      $status = FALSE;
    }
    else {
      // Image files are present.
      $message_body .= '<strong>Images All Present & Counted For!</strong>';    
      $status = TRUE;
    }
  }

  drupal_set_message($message_body, 'warning' );    
  return $status;
}

/**
*  Implementation of custom ad parser.
*  
*  Create node from ad.
*
*  @TODO
*  Image handler should:
*   - Perform PREFLIGHT for images!!
*   - Check the entire directory for file
*   - LEAVE - if already a 'live' file (ie. in `files/classifieds_ad_images`
*   - MOVE - if file is in 'files/classified_ad_image_upload`
*/
function _adworks_parse_indivual_ad($ad, $create_ads = TRUE) {
  
  $new_ad = new StdClass();
  $new_ad->type = 'classified';
  node_object_prepare($new_ad);
    
  $new_ad->language = 'und';
  

  // Image
  preg_match('/(?<=PICAD)[0-9]{4,20}(?:[-_]*[0-9]{1,3})/', $ad, $image);
  $image = $image[0];
  if ($image) {
    // Check for image on FILES
    // Search Directory // Upgradable function
    $image_name = $image . '.jpg';
    $options = array ('key' => 'filename');
    $found = file_scan_directory('public://', '$' . $image . '$', $options);
    $image_file = array_shift($found);

    // Create managed File Object and add Image fields.
    if($image_file->uri) {      
      $file = (object) array(
        'uid' => 1,
        'uri' => $image_file->uri,
        'filename' => $image_file->filename,
        'title' => 'Pennywise Classified Ad : ' . $image_file->name,
        'filemime' => 'image/jpeg',
        'status' => 1,
      );
      
      // Move image to Classified Image folder
      $file = file_copy($file, 'public://classified_ad_images', FILE_EXISTS_REPLACE);
      
      $new_ad->field_image = array(
        $new_ad->language => array(
          0 => (array)$file,
        ),
      );
      
      $images_found[] = $image_name;
    }
    else {
      $images_missing[] = $image_name;
    }
  }


  // Ad Copy
  preg_match('/(?<=\<begad>)(.+)(?=<endad>)/', $ad, $copy);
  $copy = $copy[0];
  
  if ($image) {
    // Remove PICAD reference from copy.
    $copy_pic = explode('PICAD', $copy);
    $copy = $copy_pic[0];
    $image_count += 1;
  }
  $new_ad->field_ad_copy = array(
    $new_ad->language => array(
      0 => array(
        'value' => $copy,
        'save_value' => check_plain($copy),
      ),
    ),
  );
  
  // Ad Title
  $title  = substr($copy, 0, 45);
  $new_ad->title = date('c') . ' :: ' . $title;

  // Link
  preg_match('/([www]{3}([\.|\/][a-zA-Z0-9_?\-=]+)+)/', $copy, $link);
  $link = check_url($link[0]);
  if ($link) {
    $new_ad->field_link = array(
      $new_ad->language => array(
        0 => array(
          'url' => $link,
        ),
      ),
    );
    // count links
    $link_count += 1;
  }
  
  // Phone
  preg_match('/((\d)?(\s|-)?(\()?(\d){3}(\))?(\s|-){1}(\d){3}(\s|-){1}(\d){4})/', $copy, $phone);
  $phone = $phone[0];
  
  if ($phone) {
    $new_ad->field_phone = array(
      $new_ad->language => array(
        0 => array(
          'number' => $phone,
          'country_codes' => 'ca',
          'extension' => '',
        ),
      ),
    );
    // Count Phone Numbers
    $phone_count += 1;
  }

  // area code
  preg_match('/(?<=zip:)[a-zA-Z0-9 ]{7,9}/', $ad, $area_code);
  $area_code = $area_code[0];

  if ($area_code) {
    $new_ad->field_area_code = array(
      $new_ad->language => array(
        0 => array(
          'value' => $area_code,
          'save_value' => check_plain($area_code),
        ),
      ),
    );
    // Count Area Codes
    $area_code_count += 1;
  }
  
  // LIVELOAD
  $new_ad->field_ad_type = array(
    $new_ad->language => array(
      0 => array(
        'value' => 0, // 1 for liveload
      ),
    ),
  );
  
  
  // Email
  preg_match('/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})/', $copy, $email);
  $email = $email[0];
  
  if ($email) {
    $new_ad->field_email = array(
      $new_ad->language => array(
        0 => array(
          'email' => $email,
        ),
      ),
    );
    // Count Email
    $email_count += 1;
  }


  // Classification
  preg_match('/(?<=class:)[0-9]{4}/', $ad, $section);
  $section = $section[0];
  $term_id = db_query('SELECT tid FROM {taxonomy_term_data} WHERE tid = (SELECT entity_id FROM {field_data_field_classified_id} WHERE field_classified_id_value = :cid)', array(':cid' => $section))->fetchField();
  $term = taxonomy_term_load($term_id);
  
  $new_ad->field_tags = array(
    $new_ad->language => array(
      0 => array(
        'tid' => $term_id,
        'taxonomy_term' => $term,
      ),
    ),
  );
  
  //if ($new_ad->field_tags[$node->language][0]['tid'] == FALSE) {
  //  dsm($new_ad->field_tags);
  //}
  
  
  if (count($images_missing) > 0 ) {
    return $results;
  }
  elseif (!$images_missing || count($images_missing) == 0) {
    if ($create_ads == TRUE) {
      node_submit($new_ad);
      node_save($new_ad);
      $ad_count += 1;
    }
    else {
          
      // log results
      $watchdog_message = "Ad Created: " . $term->name . ' ' . $term_id . 
      watchdog($watchdog_message, 'error message');
      
    }
  }
  
  // Collate ad creation data.
  $results = array(
    'email' => $email_count,
    'link' => $link_count,
    'area code' => $area_code_count,
    'image' => array(
      'found' => $images_found,
      'error' => $images_missing,
      'total' => $image_count,
    ),
    'phone' => $phone_count,
    'ad_count' => $ad_count
  );

  return $results;
  
}

