<?php
/**
* This module modifies the Default Login Form in favour of online-ad-submission.
*
* Creates Menu/Page for ad and thank you pages.
* - Ad page determines the user status
* - - New Users register then create an ad
* - - Returning Users can login (or are already logged in)
* - Thank you page shown upon ad completion.
*
* @TODO
* - Create a jQuery action that hides and populates:
*   - username field
*     - Populate with firstname+lastname(+phone)
*   - password + confirm password field
*     - populate with random words or 
* - send email notification
*   send login details upon completion of login form 
*   but ad creation not a prerequisite.
*/

/**
* Implementation of HOOK_menu
*/
function clientlogin_menu() {
  $items['ad/submit'] = array(
    'access callback' => TRUE,
    'title' => 'Pennywise Ad Submission Page',
    'page callback' => clientlogin_page,
  );
  
  return $items;
}

/**
* Ad Creation Page
*
* Determine if user is logged in.
*
* @TODO
* - Create theme LoginToboggan login block.
*
* @return
*   - `User Registration` form
*   - or `Online Ad Submission` Form if logged in.
*/
function clientlogin_page() {
  global $user;
  if (!$user->uid) {

  // Following code from LoginToboggan.
    $register_form = drupal_get_form('user_register_form');
    $rendered_login_form = drupal_render($login_form);
    $rendered_register_form = drupal_render($register_form);
    $variables = array(
      'login_form' => $rendered_login_form,
      'register_form' => $rendered_register_form,
      'active_form' => $active_form,
    );
    $content = theme('lt_unified_login_page', $variables);
  }
  else {
    $content = drupal_get_form('ad_s_node_form');
    //$content = drupal_get_form('online_ad_submission_node_form');
    module_load_include('inc', 'node', 'node.pages');
    $node_type = 'ad_s';
    $form_id = $node_type . '_node_form';
    $node->uid = $user-uid;
    $node->name = (isset($user->name) ? $user->name : '');
    $node->type = $node_type;
    node_object_prepare($node);
    $content = drupal_get_form($form_id, $node);
  }

  return $content;
}


/**
* Implementation of hook_block
*
* Create block with a link to ad creation page.
*/
function clientlogin_block_info() {
  $blocks['ad_submit_block'] = array(
    'info'        => t('Submit Classified Ad Box'),
    'status'      => TRUE,
    'weight'      => -20,
    'region'      => 'sidebar_first',
    'visibility'  => 0,
    'cache'       => NULL,
  );
  return $blocks;
}

function clientlogin_block_view($delta = '') {
  switch ($delta) {
    case 'ad_submit_block':
      $block['title'] = '<none>';
      $block['content'] = l('Submit Classified Ad', 'ad/submit');
      break;
  }
  return $block;
}

/**
* Implementation of hook_form_alter
*
* User registration page alter.
* - change submit button
* 
* @TODO
* - Theme LogginTobbogan and User Registration
* - Populate and hide Password field. (jQuery)
*/
function clientlogin_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register':
      // New Submit Button Name
      $form['submit']['#value'] = 'Create Your Ad';

      // Hide and prepopulate forms
      //$form['name']['#default_value'] = 'client' . time();
      //$form['name']['#access']        = FALSE;
      
      // Hide Passoword fiel
      // $form['pass']['#access']        = FALSE;

      // Add custom validation first
      array_unshift($form['#validate'], '_clientlogin_validation');
        
      break;
    case 'customer_node_form':
      $form['title']['#access']        = FALSE;
      
      break;
  }
}


/**
* Implementation of hook_validate
*
* This function creates a custom password and passes it to the form field.
* So that the login user doesn't need to create a password.
*
* Not currently activated or working.
*/
function _clientlogin_validation(&$form, &$form_state) {
    $length = 8;
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%&*{}<>?_-';
    $password = '';    

    for ($p = 0; $p < $length; $p++) {
        $password .= $characters[mt_rand(0, strlen($characters))];
    }

    $form_state['post']['pass2'] = array(
      'pass1' => $password,
      'pass2' => $password,
  );
  
}

/**
* Implementation of hook_validate
*/
function _clientlogin_validate_name($element, &$form_state) {
//  $form_state['post']['field_]
}
